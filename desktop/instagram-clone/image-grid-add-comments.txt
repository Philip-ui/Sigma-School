import { Col, Image, Row, Button, Modal, Form } from "react-bootstrap";
import { useSelector } from "react-redux";
import { useState } from "react";
import UpdatePostModal from "./UpdatePostModal";
import DeletePostModal from "./DeletePostModal";

export default function ImageGrid() {
    const posts = useSelector((state) => state.posts);

    const [currentPost, setCurrentPost] = useState(null);
    const [showUpdateModal, setShowUpdateModal] = useState(false);
    const [showDeleteModal, setShowDeleteModal] = useState(false);

    // Add state variables for the comment modal
    const [showCommentModal, setShowCommentModal] = useState(false);
    const [commentText, setCommentText] = useState(""); // Track the comment text

    const [likeCount, setLikeCount] = useState({});

    const handleClose = () => {
        setCurrentPost(null);
        setShowUpdateModal(false);
        setShowDeleteModal(false);
        // Close the comment modal as well
        setShowCommentModal(false);
    };

    const handleShow = (post) => {
        setCurrentPost(post);
        setShowUpdateModal(true);
    }

    const handleDelete = (post) => {
        setCurrentPost(post);
        setShowDeleteModal(true);
    };

    const handleCount = (postId) => {
        setLikeCount((prevLikeCount) => ({
            ...prevLikeCount,
            [postId]: (prevLikeCount[postId] || 0) + 1,
        }));
    };

    const handleComment = (post) => {
        // Set the current post and open the comment modal
        setCurrentPost(post);
        setShowCommentModal(true);
    };

    const renderImages = () => {
        return posts.map((post) => (
            <Col md={4} key={post.id} className="mb-4">
                <Image src={post.image} fluid className="mb-2" onClick={() => handleComment(post)} />
                <Button onClick={() => handleShow(post)} variant="outline-primary">
                    <i className="bi bi-pencil-square"></i>
                </Button>
                <Button variant="outline-danger" onClick={() => handleDelete(post)} className="mx-2">
                    <i className="bi bi-trash"></i>
                </Button>
                <Button variant="outline-secondary" onClick={() => handleCount(post.id)} className="mx-2">
                    <i className="bi bi-hand-thumbs-up"></i> {likeCount[post.id] || 0}
                </Button>
            </Col>
        ));
    };

    return (
        <>
            <Row>{renderImages()}</Row>
            {currentPost && (
                <UpdatePostModal show={showUpdateModal} handleClose={handleClose} postId={currentPost.id} />
            )}
            {currentPost && (
                <DeletePostModal
                    show={showDeleteModal}
                    handleClose={handleClose}
                    handleDelete={handleDelete}
                    post={currentPost}
                />
            )}

            {/* Comment modal */}
            <Modal show={showCommentModal} onHide={handleClose}>
                <Modal.Header closeButton>
                    <Modal.Title>Add Comment</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <Form.Group>
                        <Form.Control
                            as="textarea"
                            rows={3}
                            value={commentText}
                            onChange={(e) => setCommentText(e.target.value)}
                            placeholder="Enter your comment"
                        />
                    </Form.Group>
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={handleClose}>
                        Close
                    </Button>
                    <Button
                        variant="primary"
                        onClick={() => {
                            // Add code to handle adding the comment to the current post here
                            // You can use commentText for the comment content
                            // After adding the comment, you can close the modal using handleClose()
                            handleClose();
                        }}
                    >
                        Add Comment
                    </Button>
                </Modal.Footer>
            </Modal>
        </>
    );
}
